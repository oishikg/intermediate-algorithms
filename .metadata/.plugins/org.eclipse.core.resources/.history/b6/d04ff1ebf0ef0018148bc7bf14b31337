package fundamentals;

public class LinkedListQueue<Item>
{
	/* nested class for user defined node */
	private class Node
	{
		/* every node in a linked list contains an item, and a refernce
		to the next node in the list */
		Item item;
		Node next;
	}
	
	/* instance variables*/
	Node pointerToHead;
	Node pointerToTail;
	int N;
	
	/* instance methods */
	
	
	public boolean isEmpty()
	{ return (N==0);}
	
	
	public int size()
	{ return (N);}
	
	public void enqueue (Item item)
	{
		/* move the tail pointer */
		Node newNode = new Node ();
		newNode.item = item;
		pointerToTail.next = newNode;
		pointerToTail = newNode;
		
		/* set the head pointer by checking if this is the 
		 * first enqueue*/
		if (N==0)
			pointerToHead = pointerToTail; 
		
		/* increment counter */
		N++; 
	}
	
	public Item dequeue ()
	{
		Item dequeuedItem = pointerToHead.item; 
		pointerToHead = pointerToHead.next;
		N--; 
		return (dequeuedItem); 
	}
	
	
	/* method to print the Queue*/
	public void printQueue()
	{
		System.out.println ("Printing the queue: ");
		for (Node i = this.pointerToHead; i!= null; i=i.next)
			System.out.println (i.item); 
		System.out.println ();
			
	}
	
	
	/* to test */
	public static void main(String[] args) 
	{
		/* create testing object */
		LinkedListQueue<String> testObject = new LinkedListQueue<String> ();
		
		/* test push() */
		testObject.enqueue("hello");
		testObject.printQueue();
		testObject.enqueue("I love you");
		testObject.printQueue();
		testObject.enqueue("Won't you tell");
		testObject.printQueue();
		testObject.enqueue("me your name");
		testObject.printQueue();
		
		
		/* test isEmpty(),  size(), pop() */
		boolean bv = testObject.isEmpty();
		assert (!bv);
		
		int size = testObject.size();
		assert (size == 4);
		
		String popVal = testObject.dequeue();
		assert (popVal == "hello");
		
		popVal = testObject.pop();
		assert (popVal == 4.20);
		
		popVal = testObject.pop();
		popVal = testObject.pop();
		
		bv = testObject.isEmpty();
		assert (bv);
	}

}
