package sorting;

public class mergeIterative
{
	/* helper function to exchange items based on keys */
	private static void exchange (Comparable[] arr, int k1, int k2)
	{
		Comparable temp = arr[k1];
		arr[k1] = arr[k2];
		arr[k2] = temp;
	}
	
	/* helper sort function for merge sort */
	private static void mergeSortHelper (Comparable[] arr, int lo, int hi, int mid)
	{
		int i = lo; // i keeps track of the left side of the array
		int j = mid + 1;  // j keeps track of the right side of the array
		
		/* copy the array into an auxilliary one */
		Comparable[] aux = new aux[arr.length];
		for (int k = lo ; k <= hi ; k++)
			aux[k] = arr[k];
		
		/* perform the merge */
		for (int k = lo ; k <= hi ; k++)
		{
			/* if the left side of the array is exhausted, add element from right side */
			if (i > mid)
				arr[k] = aux[j++];
			/* if the right side of the array is exhausted, add element from the left side */
			else if (j > hi)
				arr[k] = aux[i++];
			/* current key on the right >= key on left */
			else if (isLessThan (aux[i], aux[j])
				arr[k] = aux[i++];
			else
				arr[k] = aux[j++];
						
		}
	}
	
	
	
	/* main sort function */
	public static void sortFunction (Comparable[] arr)
	{
		
	}
	
	/* function to check if one of the two items being compared
	 * is less than the other */
	private static boolean isLessThan (Comparable v, Comparable w)
	{
		return (v.compareTo(w) < 0)
	}
		
		
	/* function to certify whether the resultant array is 
	 * at all sorted
	 */
	public static boolean isSohttp://marketplace.eclipse.org/marketplace-client-intro?mpc_install=3274405rted (Comparable[] a)
	{
		for (int i=1 ; i<arr.length ; i++)
		{
			if (isLessThan (arr[i], arr[i-1]))
				return false;
		}
		return true;
	}
	
	/* function to print sorted array */
	private static void printArray (Comparable[] arr)
	{
		System.out.println("Printing the array ");
		for (int i=0 ; i<arr.length ; i++)		
			System.out.println(arr[i]);
	}
	
	
	/* main function to test the API code */
	public static void main (String[] args)
	{
	
	}
	
}