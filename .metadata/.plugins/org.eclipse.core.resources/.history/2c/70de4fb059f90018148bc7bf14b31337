package sorting;

/* iterative implementation of merge sort 
 */
public class MergeIterative
{

	/* the auxiliary array should be global static variable to avoid 
	 * repeated declarations and initializations
	 */
	private static int[] aux;
			
		
	/* function to merge two sorted arrays */
	private static void merge (int[] arr, int lo, int hi, int mid)
	{
		int i = lo; // i keeps track of the left side of the array
		int j = mid + 1;  // j keeps track of the right side of the array
		
		/* copy the array into the auxiliary one */
		for (int k = lo ; k <= hi ; k++)
			aux[k] = arr[k];
		
		/* perform the merge */
		for (int k = lo ; k <= hi ; k++)
		{
			/* if the left side of the array is exhausted, add element from right side */
			if (i > mid)
				arr[k] = aux[j++];
			/* if the right side of the array is exhausted, add element from the left side */
			else if (j > hi)
				arr[k] = aux[i++];
			/* current key on the right >= key on left */
			else if (aux[i] < aux[j])
				arr[k] = aux[i++];
			else
				arr[k] = aux[j++];
						
		}
		
	}
	
			
	/* main sort function */
	public static void mergeSort (int[] arr)
	{
		/* initialize the auxiliary array */
		int N = arr.length;
		aux = new int [N];
		for (int sz = 1 ; sz < N ; sz = sz + sz)
		{
			for (int lo = 0 ; lo < N-sz ; lo += sz+sz)
				merge (arr, lo, lo+sz-1 , Math.min(lo+sz+sz-1, N-1)); 
		}
		
	}
			
		
	/* function to certify whether the resultant array is 
	 * at all sorted
	 */
	public static boolean isSorted (int[] arr)
	{
		for (int i=1 ; i<arr.length ; i++)
		{